<!DOCTYPE html>
    <%- include('partials/head'); -%>
    <body>
        <!-- Navbar -->
        <%- include('partials/nav'); -%>
        
        <!-- Top Row -->
        <div class="row">
            <!-- Balance Card -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card shadow h-100 py-2" style="border-left: .25rem solid #ffc107!important;">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Balance</div>
                                <div id="ContainerBalance"></div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-calendar fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Total Invested Card -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card shadow h-100 py-2" style="border-left: .25rem solid #ffc107!important;">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                    Invested</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">$215,000</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Total Earned Card (Demo) -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card shadow h-100 py-2" style="border-left: .25rem solid #ffc107!important;">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Tasks
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">50%</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Pending Requests Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-warning shadow h-100 py-2" style="border-left: .25rem solid #ffc107!important;">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                    Pending Requests</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">18</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-comments fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-8 col-lg-7">
                <div class="card shadow mb-4">
                    <!-- Card Header - Dropdown -->
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <h6 class="m-0 font-weight-bold text-primary text-center">Your Stocks</h6>
                        <div class="dropdown no-arrow">
                            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                            </a>
                            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                                <div class="dropdown-header">Dropdown Header:</div>
                                <a class="dropdown-item" href="#">Action</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#">Something else here</a>
                            </div>
                        </div>
                    </div>
                    <!-- Card Body -->
                    <div class="card-body">
                        <div class="chart-area"><div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                            <canvas id="myChart" style="display: block; height: 160px; width: 360px;" width="450" height="200" class="chartjs-render-monitor"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="card text-center">
                    <div class="card-header text-white bg-primary mb-3">
                        Add Funds
                    </div>
                    <div class="card-body" style="width: 18rem;">
                        <form id="AddFunds">
                            <input id="Add" class="form-control" type="number" style="width:100%" placeholder="0.00" max=10000.00 min=1.00 step="1.00">
                            <br>
                            <button class="btn btn-primary text-center" style="width:100%" type="button" onclick="addBalance()">Add</button>
                        </div>
                    </div>
                </div>
                <div class="card text-center">
                    <div class="card-header text-white bg-primary mb-3">
                        Withdraw Funds
                    </div>
                    <div class="card-body" style="width: 18rem;">
                        <form id="WithdrawFunds">
                            <input id="Withdraw" class="form-control" type="number" style="width:100%" placeholder="0.00" max=10000.00 min=1.00 step="1.00">
                            <br>
                            <button class="btn btn-primary text-center" style="width:100%" type="button" onclick="withdrawBalance()">Withdraw</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Buy + Sell Buttons -->
        <!-- Stock Table (name, value, %diff per row) -->
        <div id="ContainerTable"></div>

        <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script defer type="module">
            import { createTransaction } from "/javascripts/data/fetchData.js"

            const containerBalance = document.getElementById("AddFunds");
            // Fetch User Table (Total Investment, Current Value) (under graph)
            async function displayTable() {
                const containerTable = document.getElementById("ContainerTable");
                let oPromise = getUserStocks();

                // Create Table Head
                let elTable = document.createElement('table');
                elTable.className = "table table-striped table-hover table-light";
                elTable.innerHTML = "<thead class='table-dark'> \
                <tr> \
                    <th scope='col'>Name</th> \
                    <th scope='col'>Quantity</th> \
                    <th scope='col'>Total Purchased</th> \
                </tr> \
                </thead>"
                containerTable.appendChild(elTable);

                // Create Table Body
                let elTableBody = document.createElement('tbody')

                // Loop through stocks
                oPromise.then(oUserStocks => {
                    if (oUserStocks) {
                        for (let i=0; i < oUserStocks.length; i++) {
                            let oUserStock = oUserStocks[i];
                            // Stock Row
                            let containerStock = document.createElement("tr");
                            
                            // Stock Name
                            let stockName = document.createElement("td");
                            stockName.innerHTML = oUserStock.stock_id;
                            containerStock.appendChild(stockName);

                            // Stock Quantity
                            let stockQuantity = document.createElement("td");
                            stockQuantity.innerHTML = oUserStock.quantity;
                            containerStock.appendChild(stockQuantity);

                            // Stock Total Purchase Value
                            let stockTotal = document.createElement("td");
                            stockTotal.innerHTML = "â‚¬" + oUserStock.total_purchase_value;
                            containerStock.appendChild(stockTotal);

                            elTableBody.appendChild(containerStock);
                        }
                        // Add Table Body to table
                        elTable.appendChild(elTableBody);
                    }
                })
            }

            // Fetch User Stocks
            async function getUserStocks(){
                let access = localStorage.getItem("access");
                if(access) {
                    let response = await fetch("http://127.0.0.1:8000/user/stockbalance/", {
                        method: 'GET',
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + access                                       
                        },
                    });
                    let data = await response.json();
                    return data;
                } else {
                    //the user is not logged in,redirect them to the login page
                    window.location.href = "/login";
                };
            };

            // Fetch User Balance
            async function getUserBalance(){
                let access = localStorage.getItem("access");
                if(access) {
                    let response = await fetch("http://127.0.0.1:8000/users/current/", {
                        method: 'GET',
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + access                                       
                        },
                    })
                    let data = await response.json();
                    return data;
                } else {
                    //the user is not logged in,redirect them to the login page
                    window.location.href = "/login";
                };
            };

            // Add User Balance
            async function addBalance() {
                let userPromise = getUserBalance();
                userPromise.then(oUser => {
                    if (oUser) {
                        let data = {
                            'user': oUser.id,
                            'type': 4,
                            'total': document.getElementById("Add").value
                        };
                        let bResponse = createTransaction(data);
                        if (bResponse) {
                            alert("Funds have been added to your account.");
                            displayBalance();
                        };
                    }
                })
            }

            // Withdraw User Balance
            async function withdrawBalance() {
                let userPromise = getUserBalance();
                userPromise.then(oUser => {
                    if (oUser) {
                        let data = {
                            'user': oUser.id,
                            'type': 2,
                            'total': document.getElementById("Withdraw").value
                        };
                        let bResponse = createTransaction(data);
                        if (bResponse) {
                            alert("Funds have been withdrawn from your account.");
                            displayBalance();
                        };
                    }
                })
            }

            window.addBalance = addBalance;
            window.withdrawBalance = withdrawBalance;

            containerBalance.addEventListener("keydown", function(e) {
                if(e.keyCode === 13) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    addBalance();
                }
            })

            // Display User Balance
            async function displayBalance() {
                const containerBalance = document.getElementById("ContainerBalance");
                containerBalance.innerHTML = "";
                let userPromise = getUserBalance();
                let elBalance = document.createElement('h5');
                elBalance.className = "h5 mb-0 font-weight-bold text-gray-800";
                userPromise.then(oUser => {
                    if (oUser) {
                        elBalance.innerHTML = "â‚¬" + oUser.balance;
                        containerBalance.appendChild(elBalance);
                    }
                })
            }
            
            async function init() {       
                let temp = {
                    x_val: [],
                    y_val: []
                };
                let oPromise = getUserStocks();
                oPromise.then(oUserStocks => {
                    if (oUserStocks) {
                        for (let oUserID in oUserStocks) {
                            let oUserStock = oUserStocks[oUserID];
                            temp.y_val.push(oUserStock.total_purchase_value);
                            temp.x_val.push(oUserStock.stock_id);
                        }
                    }
                    drawBarGraph(temp);
                })
                displayBalance();
                displayTable();
            }

            // Script for Graph
            async function drawBarGraph(data) {
                const labels = data.x_val;
                const oChartData = data.y_val;
                const ctx = document.getElementById('myChart').getContext('2d');
                const myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Total Purchase Value of Stocks Owned',
                            data: oChartData,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            init();
            
        </script>
    </body>
</html>